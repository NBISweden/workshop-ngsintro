{"0x3e": "DS DS  DS segment override prefix", "0x3d": "CMP rAX  Compare Two Operands", "0xe4": "IN Ib AL Input from Port", "0x3f": "AAS  AL ASCII Adjust AL After Subtraction", "0x3a": "CMP Gb  Compare Two Operands", "0x3c": "CMP AL  Compare Two Operands", "0x3b": "CMP Gvqp  Compare Two Operands", "0xfa": "CLI   Clear Interrupt Flag", "0xda": "FIADD Mdi ST Add", "0xec": "IN DX AL Input from Port", "0x28": "SUB Gb Eb Subtract", "0x29": "SUB Gvqp Evqp Subtract", "0xf8": "CLC   Clear Carry Flag", "0xeb": "JMP Jbs  Jump", "0x22": "AND Eb Gb Logical AND", "0x23": "AND Evqp Gvqp Logical AND", "0x20": "AND Gb Eb Logical AND", "0x21": "AND Gvqp Evqp Logical AND", "0x26": "ES ES  ES segment override prefix", "0x27": "DAA  AL Decimal Adjust AL after Addition", "0x24": "AND Ib AL Logical AND", "0x25": "AND Ivds rAX Logical AND", "0xef": "OUT eAX DX Output to Port", "0xe2": "LOOP Jbs eCX Decrement count; Jump short if count!=0", "0xee": "OUT AL DX Output to Port", "0xed": "IN DX eAX Input from Port", "0x35": "XOR Ivds rAX Logical Exclusive OR", "0x34": "XOR Ib AL Logical Exclusive OR", "0x37": "AAA  AL ASCII Adjust After Addition", "0x36": "SS SS  SS segment override prefix", "0x31": "XOR Gvqp Evqp Logical Exclusive OR", "0x30": "XOR Gb Eb Logical Exclusive OR", "0x33": "XOR Evqp Gvqp Logical Exclusive OR", "0x32": "XOR Eb Gb Logical Exclusive OR", "0xd4": "AAM  AL ASCII Adjust AX After Multiply", "0x39": "CMP Evqp  Compare Two Operands", "0x38": "CMP Eb  Compare Two Operands", "0xc0": "ROL Ib Eb Rotate", "0xe1": "LOOPZ Jbs eCX Decrement count; Jump short if count!=0 and ZF=1", "0xfe": "INC  Eb Increment by 1", "0x88": "MOV Gb Eb Move", "0x89": "MOV Gvqp Evqp Move", "0x2b": "SUB Evqp Gvqp Subtract", "0x2c": "SUB Ib AL Subtract", "0xfd": "STD   Set Direction Flag", "0x2a": "SUB Eb Gb Subtract", "0x2f": "DAS  AL Decimal Adjust AL after Subtraction", "0xfc": "CLD   Clear Direction Flag", "0x2d": "SUB Ivds rAX Subtract", "0x2e": "CS CS  CS segment override prefix", "0x40": "INC  Zv Increment by 1", "0x41": "REX.B   Extension of r/m field, base field, or opcode reg field", "0x42": "REX.X   Extension of SIB index field", "0x43": "REX.XB   REX.X and REX.B combination", "0x44": "REX.R   Extension of ModR/M reg field", "0x45": "REX.RB   REX.R and REX.B combination", "0x46": "REX.RX   REX.R and REX.X combination", "0x47": "REX.RXB   REX.R, REX.X and REX.B combination", "0x48": "DEC  Zv Decrement by 1", "0x49": "REX.WB   REX.W and REX.B combination", "0xaf": "SCAS ES:[DI]  Scan String", "0xae": "SCAS (ES:)[rDI]  Scan String", "0xad": "LODS DS:[SI] AX Load String", "0xac": "LODS (DS:)[rSI] AL Load String", "0xab": "STOS AX ES:[DI] Store String", "0xaa": "STOS AL (ES:)[rDI] Store String", "0xe6": "OUT AL Ib Output to Port", "0xea": "JMPF Ap  Jump", "0x4a": "REX.WX   REX.W and REX.X combination", "0x4b": "REX.WXB   REX.W, REX.X and REX.B combination", "0x4c": "REX.WR   REX.W and REX.R combination", "0x4d": "REX.WRB   REX.W, REX.R and REX.B combination", "0x4e": "REX.WRX   REX.W, REX.R and REX.X combination", "0x4f": "REX.WRXB   REX.W, REX.R, REX.X and REX.B combination", "0xff": "INC  Evqp Increment by 1", "0x50": "PUSH Zv SS:[rSP] Push Word, Doubleword or Quadword Onto the Stack", "0xe5": "IN Ib eAX Input from Port", "0x58": "POP SS:[rSP] Zv Pop a Value from the Stack", "0xf4": "HLT   Halt", "0xfb": "STI   Set Interrupt Flag", "0xf9": "STC   Set Carry Flag", "0xf6": "TEST Eb  Logical Compare", "0xa9": "TEST rAX  Logical Compare", "0xa8": "TEST AL  Logical Compare", "0xa7": "CMPS ES:[DI]  Compare String Operands", "0xa6": "CMPS (ES:)[rDI]  Compare String Operands", "0xa5": "MOVS DS:[SI] ES:[DI] Move Data from String to String", "0xa4": "MOVS (DS:)[rSI] (ES:)[rDI] Move Data from String to String", "0xa3": "MOV rAX Ovqp Move", "0xa2": "MOV AL Ob Move", "0xa1": "MOV Ovqp rAX Move", "0xa0": "MOV Ob AL Move", "0xf5": "CMC   Complement Carry Flag", "0x7a": "JP Jbs  Jump short if parity/parity even (PF=1)", "0xf2": "REPNZ  eCX Repeat String Operation Prefix", "0x7c": "JL Jbs  Jump short if less/not greater (SF!=OF)", "0x7b": "JNP Jbs  Jump short if not parity/parity odd", "0x7e": "JLE Jbs  Jump short if less or equal/not greater ((ZF=1) OR (SF!=OF))", "0x7d": "JNL Jbs  Jump short if not less/greater or equal (SF=OF)", "0x7f": "JNLE Jbs  Jump short if not less nor equal/greater ((ZF=0) AND (SF=OF))", "0xf0": "LOCK   Assert LOCK# Signal Prefix", "0x68": "PUSH Ivs SS:[rSP] Push Word, Doubleword or Quadword Onto the Stack", "0x69": "IMUL Evqp Gvqp Signed Multiply", "0x66": "   Operand-size override prefix", "0x67": "   Address-size override prefix", "0x64": "FS FS  FS segment override prefix", "0x65": "GS GS  GS segment override prefix", "0x62": "BOUND Gv SS:[rSP] Check Array Index Against Bounds", "0x63": "ARPL Ew  Adjust RPL Field of Segment Selector", "0x60": "PUSHA AX SS:[rSP] Push All General-Purpose Registers", "0x61": "POPA SS:[rSP] DI Pop All General-Purpose Registers", "0xd5": "AAD  AL ASCII Adjust AX Before Division", "0xce": "INTO eFlags SS:[rSP] Call to Interrupt Procedure", "0xcd": "INT Ib SS:[rSP] Call to Interrupt Procedure", "0xb8": "MOV Ivqp Zvqp Move", "0xcf": "IRET SS:[rSP] Flags Interrupt Return", "0xca": "RETF Iw  Return from procedure", "0xcc": "INT 3 SS:[rSP] Call to Interrupt Procedure", "0xcb": "RETF SS:[rSP]  Return from procedure", "0xb0": "MOV Ib Zb Move", "0xf3": "REPZ  eCX Repeat String Operation Prefix", "0xe3": "JCXZ Jbs  Jump short if eCX register is 0", "0xd6": "SALC   Undefined and Reserved; Does not Generate #UD", "0x6f": "OUTS DS:[SI] DX Output String to Port", "0x6d": "INS DX ES:[DI] Input from Port to String", "0x6e": "OUTS (DS):[rSI] DX Output String to Port", "0x6b": "IMUL Evqp Gvqp Signed Multiply", "0x6c": "INS DX (ES:)[rDI] Input from Port to String", "0x6a": "PUSH Ibss SS:[rSP] Push Word, Doubleword or Quadword Onto the Stack", "0x79": "JNS Jbs  Jump short if not sign (SF=0)", "0x78": "JS Jbs  Jump short if sign (SF=1)", "0x71": "JNO Jbs  Jump short if not overflow (OF=0)", "0x70": "JO Jbs  Jump short if overflow (OF=1)", "0x73": "JNB Jbs  Jump short if not below/above or equal/not carry (CF=0)", "0x72": "JB Jbs  Jump short if below/not above or equal/carry (CF=1)", "0x75": "JNZ Jbs  Jump short if not zero/not equal (ZF=1)", "0x74": "JZ Jbs  Jump short if zero/equal (ZF=0)", "0x77": "JNBE Jbs  Jump short if not below or equal/above (CF=0 AND ZF=0)", "0x76": "JBE Jbs  Jump short if below or equal/not above (CF=1 AND ZF=1)", "0xc5": "LDS Mp DS Load Far Pointer", "0xc4": "LES Mp ES Load Far Pointer", "0xc7": "MOV Ivds Evqp Move", "0xc6": "MOV Ib Eb Move", "0xc1": "ROL Ib Evqp Rotate", "0x8b": "MOV Evqp Gvqp Move", "0xc3": "RETN SS:[rSP]  Return from procedure", "0xc2": "RETN SS:[rSP]  Return from procedure", "0x8c": "MOV Sw Mw Move", "0xc9": "LEAVE SS:[rSP] eBP High Level Procedure Exit", "0xc8": "ENTER Iw SS:[rSP] Make Stack Frame for Procedure Parameters", "0xf1": "INT1   Undefined and Reserved; Does not Generate #UD", "0xe9": "JMP Jvds  Jump", "0xe8": "CALL Jvds SS:[rSP] Call Procedure", "0xd9": "FLD ESsr ST Load Floating Point Value", "0xf7": "TEST Evqp  Logical Compare", "0xd0": "ROL 1 Eb Rotate", "0x9f": "LAHF  AH Load Status Flags into AH Register", "0x9e": "SAHF AH  Store AH into Flags", "0x9d": "POPF SS:[rSP] Flags Pop Stack into FLAGS Register", "0x08": "OR Gb Eb Logical Inclusive OR", "0x09": "OR Gvqp Evqp Logical Inclusive OR", "0x9a": "CALLF Ap SS:[rSP] Call Procedure", "0xd7": "XLAT (DS:)[rBX+AL] AL Table Look-up Translation", "0x04": "ADD Ib AL Add", "0x05": "ADD Ivds rAX Add", "0x06": "PUSH ES SS:[rSP] Push Word, Doubleword or Quadword Onto the Stack", "0x07": "POP SS:[rSP] ES Pop a Value from the Stack", "0x00": "ADD Gb Eb Add", "0x01": "ADD Gvqp Evqp Add", "0x02": "ADD Eb Gb Add", "0x03": "ADD Evqp Gvqp Add", "0x84": "TEST Eb  Logical Compare", "0x85": "TEST Evqp  Logical Compare", "0x86": "XCHG  Gb Exchange Register/Memory with Register", "0x87": "XCHG  Gvqp Exchange Register/Memory with Register", "0x80": "ADD Ib Eb Add", "0x81": "ADD Ivds Evqp Add", "0x82": "ADD Ib Eb Add", "0x83": "ADD Ibs Evqp Add", "0x1f": "POP SS:[rSP] DS Pop a Value from the Stack", "0x1e": "PUSH DS SS:[rSP] Push Word, Doubleword or Quadword Onto the Stack", "0x1d": "SBB Ivds rAX Integer Subtraction with Borrow", "0x1c": "SBB Ib AL Integer Subtraction with Borrow", "0x1b": "SBB Evqp Gvqp Integer Subtraction with Borrow", "0x1a": "SBB Eb Gb Integer Subtraction with Borrow", "0xde": "FIADD Mwi ST Add", "0xd1": "ROL 1 Evqp Rotate", "0xd2": "ROL CL Eb Rotate", "0xd3": "ROL CL Evqp Rotate", "0x9c": "PUSHF Flags SS:[rSP] Push FLAGS Register onto the Stack", "0x9b": "FWAIT   Check pending unmasked floating-point exceptions", "0x8d": "LEA M Gvqp Load Effective Address", "0x8e": "MOV Ew Sw Move", "0x8f": "POP SS:[rSP] Ev Pop a Value from the Stack", "0xe0": "LOOPNZ Jbs eCX Decrement count; Jump short if count!=0 and ZF=0", "0xe7": "OUT eAX Ib Output to Port", "0x8a": "MOV Eb Gb Move", "0x19": "SBB Gvqp Evqp Integer Subtraction with Borrow", "0x18": "SBB Gb Eb Integer Subtraction with Borrow", "0x17": "POP SS:[rSP] SS Pop a Value from the Stack", "0x16": "PUSH SS SS:[rSP] Push Word, Doubleword or Quadword Onto the Stack", "0x15": "ADC Ivds rAX Add with Carry", "0x14": "ADC Ib AL Add with Carry", "0x13": "ADC Evqp Gvqp Add with Carry", "0x12": "ADC Eb Gb Add with Carry", "0x11": "ADC Gvqp Evqp Add with Carry", "0x10": "ADC Gb Eb Add with Carry", "0xd8": "FADD Msr ST Add", "0xdb": "FILD Mdi ST Load Integer", "0xdc": "FADD Mdr ST Add", "0xdd": "FLD Mdr ST Load Floating Point Value", "0x99": "CWD AX DX Convert Word to Doubleword", "0xdf": "FILD Mwi ST Load Integer", "0x90": "XCHG  Zvqp Exchange Register/Memory with Register", "0x0d": "OR Ivds rAX Logical Inclusive OR", "0x0e": "PUSH CS SS:[rSP] Push Word, Doubleword or Quadword Onto the Stack", "0x0f": "POP SS:[rSP] CS Pop a Value from the Stack", "0x98": "CBW AL AX Convert Byte to Word", "0x0a": "OR Eb Gb Logical Inclusive OR", "0x0b": "OR Evqp Gvqp Logical Inclusive OR", "0x0c": "OR Ib AL Logical Inclusive OR"}